Geek went to buy some chocolates from a nearby shop with k coins in his pocket. He found that the shop contains n chocolates which are arranged in sorted order (increasing) of their prices.

Now geek wants to taste costlier chocolates so he decided that he will buy the costliest chocolate (of course among the ones that he can afford) till there exists at least one type of chocolate he can afford. You may assume that there is an infinite supply of chocolates in the shop Geek visited.

As you know, Geek is a shy person and hence he will enquire about the prices of the chocolates at most 50 times from the shopkeeper. Now, your task is to find the number of chocolates he had enjoyed. 

Note: If you call the Shop.get function more than 50 times it will return -1. Price of chocolates are pairwise distinct.


Input:
4 9 
1 2 3 4

Output:
3

Explanation: The prices of chocolates are [1, 2, 3, 4] and Geek had 9 coins with him. So he can buy two chocolates that cost 4 coins. Thereafter, he had only 1 coin with him, hence he will have 1 more chocolate (that costs 1 coin).

ans:
first we will aplly binary search on the array and find the maximum cost which is less or equal to the total money geek have
as we will find the maximum cost we will find the total no of chocolatecate he can buy from the given money and how is left with him
the whole binary search will occur uder the condition that k>0


class Solution{
    public:
    
    Shop shop;
    Solution(Shop s)
    {
        this->shop = s;
    }
    long long find(int n, long k){
        // Return the number of chocolates Geek had
        // enjoyed out of 'n' chocolates availabe in the
        // 'shop'.
        long maxChoco=0;
        int left=0;
        int right=n-1;
        int maxPrice=0;
        while(k>0){
            
            int maxPrice=0;
            
            while(left<=right){[1,2,3,4]
                
                int mid=(left+right)/2; // arr[1]=2
                
                int price=shop.get(mid);
                
                if(price>k){ k=9 os grater than 2 so we will search on right hand side
                    
                    right=mid-1;
                }
                else{
                    maxPrice=price; similary the loop will run till we get 4
                    left=mid+1;
                }
            }
            
            if(maxPrice==0) break;
            int numchoco=(int) (k/maxPrice); no of chocate geek can buy 9/4==2
            
            maxChoco+=numchoco; add 2 to the toal count
            
            k=k%maxPrice; money left 9%4==1
            
            left=0;//again start from left but this time the maximum money is 1 so during the first breakage at index 1 the array move to left
        }
        
        return maxChoco;
        
    }

};